/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"

	"github.com/twilio/twilio-go/client"
)

// Optional parameters for the method 'CreateHostedNumberOrder'
type CreateHostedNumberOrderParams struct {
	// The [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number hosted by the new hosted number order.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.
	PhoneNumber *string `json:"PhoneNumber,omitempty"`
	// Whether the SMS capability will be hosted on our platform. Can be `true` of `false`.
	SmsCapability *bool `json:"SmsCapability,omitempty"`
	// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
	AccountSid *string `json:"AccountSid,omitempty"`
	// A descriptive string that you create to describe the resource. It can be up to 128 characters long.
	FriendlyName *string `json:"FriendlyName,omitempty"`
	// The SID of the Application we should use to handle SMS messages sent to this number. If a `sms_application_sid` is present, we will ignore all of the SMS URLs and use those set on the application.
	SmsApplicationSid *string `json:"SmsApplicationSid,omitempty"`
	// The HTTP method we should use to call the `sms_fallback_url`. Can be: `POST` or `GET` and the default is `POST`.
	SmsFallbackMethod *string `json:"SmsFallbackMethod,omitempty"`
	// The URL we should call if there is a problem calling `sms_url` when the IncomingPhoneNumber receives an SMS message.
	SmsFallbackUrl *string `json:"SmsFallbackUrl,omitempty"`
	// The HTTP method we should use to call the `sms_url`. Can be: `POST` or `GET` and the default is `POST`.
	SmsMethod *string `json:"SmsMethod,omitempty"`
	// The URL we should call using the `sms_method` when the IncomingPhoneNumber receives an SMS message.
	SmsUrl *string `json:"SmsUrl,omitempty"`
	// The HTTP method we should use when calling `status_callback_url`.
	StatusCallbackMethod *string `json:"StatusCallbackMethod,omitempty"`
	// The URL we should call using the `status_callback_method` to send status information to your application.
	StatusCallbackUrl *string `json:"StatusCallbackUrl,omitempty"`
	// The number of seconds to wait before initiating the ownership verification call. Can be a value between 0 and 60, inclusive.
	VerificationCallDelay *int `json:"VerificationCallDelay,omitempty"`
	// The numerical extension to dial when making the ownership verification call.
	VerificationCallExtension *string `json:"VerificationCallExtension,omitempty"`
	// The SID of the identity document resource that represents the document used to verify ownership of the number to be hosted.
	VerificationDocumentSid *string `json:"VerificationDocumentSid,omitempty"`
	//
	VerificationType *string `json:"VerificationType,omitempty"`
}

func (params *CreateHostedNumberOrderParams) SetPhoneNumber(PhoneNumber string) *CreateHostedNumberOrderParams {
	params.PhoneNumber = &PhoneNumber
	return params
}
func (params *CreateHostedNumberOrderParams) SetSmsCapability(SmsCapability bool) *CreateHostedNumberOrderParams {
	params.SmsCapability = &SmsCapability
	return params
}
func (params *CreateHostedNumberOrderParams) SetAccountSid(AccountSid string) *CreateHostedNumberOrderParams {
	params.AccountSid = &AccountSid
	return params
}
func (params *CreateHostedNumberOrderParams) SetFriendlyName(FriendlyName string) *CreateHostedNumberOrderParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateHostedNumberOrderParams) SetSmsApplicationSid(SmsApplicationSid string) *CreateHostedNumberOrderParams {
	params.SmsApplicationSid = &SmsApplicationSid
	return params
}
func (params *CreateHostedNumberOrderParams) SetSmsFallbackMethod(SmsFallbackMethod string) *CreateHostedNumberOrderParams {
	params.SmsFallbackMethod = &SmsFallbackMethod
	return params
}
func (params *CreateHostedNumberOrderParams) SetSmsFallbackUrl(SmsFallbackUrl string) *CreateHostedNumberOrderParams {
	params.SmsFallbackUrl = &SmsFallbackUrl
	return params
}
func (params *CreateHostedNumberOrderParams) SetSmsMethod(SmsMethod string) *CreateHostedNumberOrderParams {
	params.SmsMethod = &SmsMethod
	return params
}
func (params *CreateHostedNumberOrderParams) SetSmsUrl(SmsUrl string) *CreateHostedNumberOrderParams {
	params.SmsUrl = &SmsUrl
	return params
}
func (params *CreateHostedNumberOrderParams) SetStatusCallbackMethod(StatusCallbackMethod string) *CreateHostedNumberOrderParams {
	params.StatusCallbackMethod = &StatusCallbackMethod
	return params
}
func (params *CreateHostedNumberOrderParams) SetStatusCallbackUrl(StatusCallbackUrl string) *CreateHostedNumberOrderParams {
	params.StatusCallbackUrl = &StatusCallbackUrl
	return params
}
func (params *CreateHostedNumberOrderParams) SetVerificationCallDelay(VerificationCallDelay int) *CreateHostedNumberOrderParams {
	params.VerificationCallDelay = &VerificationCallDelay
	return params
}
func (params *CreateHostedNumberOrderParams) SetVerificationCallExtension(VerificationCallExtension string) *CreateHostedNumberOrderParams {
	params.VerificationCallExtension = &VerificationCallExtension
	return params
}
func (params *CreateHostedNumberOrderParams) SetVerificationDocumentSid(VerificationDocumentSid string) *CreateHostedNumberOrderParams {
	params.VerificationDocumentSid = &VerificationDocumentSid
	return params
}
func (params *CreateHostedNumberOrderParams) SetVerificationType(VerificationType string) *CreateHostedNumberOrderParams {
	params.VerificationType = &VerificationType
	return params
}

// Host a phone number's capability on our platform.
func (c *ApiService) CreateHostedNumberOrder(params *CreateHostedNumberOrderParams) (*NumbersV1HostedNumberOrder, error) {
	path := "/v1/HostedNumber/Orders"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PhoneNumber != nil {
		data.Set("PhoneNumber", *params.PhoneNumber)
	}
	if params != nil && params.SmsCapability != nil {
		data.Set("SmsCapability", fmt.Sprint(*params.SmsCapability))
	}
	if params != nil && params.AccountSid != nil {
		data.Set("AccountSid", *params.AccountSid)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.SmsApplicationSid != nil {
		data.Set("SmsApplicationSid", *params.SmsApplicationSid)
	}
	if params != nil && params.SmsFallbackMethod != nil {
		data.Set("SmsFallbackMethod", *params.SmsFallbackMethod)
	}
	if params != nil && params.SmsFallbackUrl != nil {
		data.Set("SmsFallbackUrl", *params.SmsFallbackUrl)
	}
	if params != nil && params.SmsMethod != nil {
		data.Set("SmsMethod", *params.SmsMethod)
	}
	if params != nil && params.SmsUrl != nil {
		data.Set("SmsUrl", *params.SmsUrl)
	}
	if params != nil && params.StatusCallbackMethod != nil {
		data.Set("StatusCallbackMethod", *params.StatusCallbackMethod)
	}
	if params != nil && params.StatusCallbackUrl != nil {
		data.Set("StatusCallbackUrl", *params.StatusCallbackUrl)
	}
	if params != nil && params.VerificationCallDelay != nil {
		data.Set("VerificationCallDelay", fmt.Sprint(*params.VerificationCallDelay))
	}
	if params != nil && params.VerificationCallExtension != nil {
		data.Set("VerificationCallExtension", *params.VerificationCallExtension)
	}
	if params != nil && params.VerificationDocumentSid != nil {
		data.Set("VerificationDocumentSid", *params.VerificationDocumentSid)
	}
	if params != nil && params.VerificationType != nil {
		data.Set("VerificationType", *params.VerificationType)
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &NumbersV1HostedNumberOrder{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Cancel the HostedNumberOrder (only available when the status is in `twilio-processing`, `received`, `pending-verification`, `verified`, and `pending-loa`).
func (c *ApiService) DeleteHostedNumberOrder(Sid string) error {
	path := "/v1/HostedNumber/Orders/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.requestHandler.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// Fetch a specific HostedNumberOrder.
func (c *ApiService) FetchHostedNumberOrder(Sid string) (*NumbersV1HostedNumberOrder, error) {
	path := "/v1/HostedNumber/Orders/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &NumbersV1HostedNumberOrder{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Optional parameters for the method 'ListHostedNumberOrder'
type ListHostedNumberOrderParams struct {
	// The string that identifies the HostedNumberOrder resources to read.
	FriendlyName *string `json:"FriendlyName,omitempty"`
	// The SID of the IncomingPhoneNumber resource created by this HostedNumberOrder.
	IncomingPhoneNumberSid *string `json:"IncomingPhoneNumberSid,omitempty"`
	// The [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone numbers of the HostedNumberOrder resources to read.
	PhoneNumber *string `json:"PhoneNumber,omitempty"`
	// The status of the resources to read. Can be: `twilio-processing`, `received`, `pending-verification`, `verified`, `pending-loa`, `carrier-processing`, `testing`, `completed`, `failed`, or `action-required`.
	Status *string `json:"Status,omitempty"`
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
	// Max number of records to return.
	Limit *int `json:"limit,omitempty"`
}

func (params *ListHostedNumberOrderParams) SetFriendlyName(FriendlyName string) *ListHostedNumberOrderParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *ListHostedNumberOrderParams) SetIncomingPhoneNumberSid(IncomingPhoneNumberSid string) *ListHostedNumberOrderParams {
	params.IncomingPhoneNumberSid = &IncomingPhoneNumberSid
	return params
}
func (params *ListHostedNumberOrderParams) SetPhoneNumber(PhoneNumber string) *ListHostedNumberOrderParams {
	params.PhoneNumber = &PhoneNumber
	return params
}
func (params *ListHostedNumberOrderParams) SetStatus(Status string) *ListHostedNumberOrderParams {
	params.Status = &Status
	return params
}
func (params *ListHostedNumberOrderParams) SetPageSize(PageSize int) *ListHostedNumberOrderParams {
	params.PageSize = &PageSize
	return params
}
func (params *ListHostedNumberOrderParams) SetLimit(Limit int) *ListHostedNumberOrderParams {
	params.Limit = &Limit
	return params
}

// Retrieve a single page of HostedNumberOrder records from the API. Request is executed immediately.
func (c *ApiService) PageHostedNumberOrder(params *ListHostedNumberOrderParams, pageToken, pageNumber string) (*ListHostedNumberOrderResponse, error) {
	path := "/v1/HostedNumber/Orders"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.IncomingPhoneNumberSid != nil {
		data.Set("IncomingPhoneNumberSid", *params.IncomingPhoneNumberSid)
	}
	if params != nil && params.PhoneNumber != nil {
		data.Set("PhoneNumber", *params.PhoneNumber)
	}
	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	if pageToken != "" {
		data.Set("PageToken", pageToken)
	}
	if pageNumber != "" {
		data.Set("Page", pageNumber)
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListHostedNumberOrderResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Lists HostedNumberOrder records from the API as a list. Unlike stream, this operation is eager and loads 'limit' records into memory before returning.
func (c *ApiService) ListHostedNumberOrder(params *ListHostedNumberOrderParams) ([]NumbersV1HostedNumberOrder, error) {
	response, errors := c.StreamHostedNumberOrder(params)

	records := make([]NumbersV1HostedNumberOrder, 0)
	for record := range response {
		records = append(records, record)
	}

	if err := <-errors; err != nil {
		return nil, err
	}

	return records, nil
}

// Streams HostedNumberOrder records from the API as a channel stream. This operation lazily loads records as efficiently as possible until the limit is reached.
func (c *ApiService) StreamHostedNumberOrder(params *ListHostedNumberOrderParams) (chan NumbersV1HostedNumberOrder, chan error) {
	if params == nil {
		params = &ListHostedNumberOrderParams{}
	}
	params.SetPageSize(client.ReadLimits(params.PageSize, params.Limit))

	recordChannel := make(chan NumbersV1HostedNumberOrder, 1)
	errorChannel := make(chan error, 1)

	response, err := c.PageHostedNumberOrder(params, "", "")
	if err != nil {
		errorChannel <- err
		close(recordChannel)
		close(errorChannel)
	} else {
		go c.streamHostedNumberOrder(response, params, recordChannel, errorChannel)
	}

	return recordChannel, errorChannel
}

func (c *ApiService) streamHostedNumberOrder(response *ListHostedNumberOrderResponse, params *ListHostedNumberOrderParams, recordChannel chan NumbersV1HostedNumberOrder, errorChannel chan error) {
	curRecord := 1

	for response != nil {
		responseRecords := response.Items
		for item := range responseRecords {
			recordChannel <- responseRecords[item]
			curRecord += 1
			if params.Limit != nil && *params.Limit < curRecord {
				close(recordChannel)
				close(errorChannel)
				return
			}
		}

		record, err := client.GetNext(c.baseURL, response, c.getNextListHostedNumberOrderResponse)
		if err != nil {
			errorChannel <- err
			break
		} else if record == nil {
			break
		}

		response = record.(*ListHostedNumberOrderResponse)
	}

	close(recordChannel)
	close(errorChannel)
}

func (c *ApiService) getNextListHostedNumberOrderResponse(nextPageUrl string) (interface{}, error) {
	if nextPageUrl == "" {
		return nil, nil
	}
	resp, err := c.requestHandler.Get(nextPageUrl, nil, nil)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListHostedNumberOrderResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}
	return ps, nil
}

// Optional parameters for the method 'UpdateHostedNumberOrder'
type UpdateHostedNumberOrderParams struct {
	// A descriptive string that you create to describe the resource. It can be up to 128 characters long.
	FriendlyName *string `json:"FriendlyName,omitempty"`
	//
	Status *string `json:"Status,omitempty"`
	// The number of seconds to wait before initiating the ownership verification call. Can be a value between 0 and 60, inclusive.
	VerificationCallDelay *int `json:"VerificationCallDelay,omitempty"`
	// The numerical extension to dial when making the ownership verification call.
	VerificationCallExtension *string `json:"VerificationCallExtension,omitempty"`
	// The SID of the Identity Document that represents the document for verifying ownership of the number to be hosted. Required when `verification_type` is `phone-bill`.
	VerificationDocumentSid *string `json:"VerificationDocumentSid,omitempty"`
	//
	VerificationType *string `json:"VerificationType,omitempty"`
}

func (params *UpdateHostedNumberOrderParams) SetFriendlyName(FriendlyName string) *UpdateHostedNumberOrderParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *UpdateHostedNumberOrderParams) SetStatus(Status string) *UpdateHostedNumberOrderParams {
	params.Status = &Status
	return params
}
func (params *UpdateHostedNumberOrderParams) SetVerificationCallDelay(VerificationCallDelay int) *UpdateHostedNumberOrderParams {
	params.VerificationCallDelay = &VerificationCallDelay
	return params
}
func (params *UpdateHostedNumberOrderParams) SetVerificationCallExtension(VerificationCallExtension string) *UpdateHostedNumberOrderParams {
	params.VerificationCallExtension = &VerificationCallExtension
	return params
}
func (params *UpdateHostedNumberOrderParams) SetVerificationDocumentSid(VerificationDocumentSid string) *UpdateHostedNumberOrderParams {
	params.VerificationDocumentSid = &VerificationDocumentSid
	return params
}
func (params *UpdateHostedNumberOrderParams) SetVerificationType(VerificationType string) *UpdateHostedNumberOrderParams {
	params.VerificationType = &VerificationType
	return params
}

// Updates a specific HostedNumberOrder.
func (c *ApiService) UpdateHostedNumberOrder(Sid string, params *UpdateHostedNumberOrderParams) (*NumbersV1HostedNumberOrder, error) {
	path := "/v1/HostedNumber/Orders/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}
	if params != nil && params.VerificationCallDelay != nil {
		data.Set("VerificationCallDelay", fmt.Sprint(*params.VerificationCallDelay))
	}
	if params != nil && params.VerificationCallExtension != nil {
		data.Set("VerificationCallExtension", *params.VerificationCallExtension)
	}
	if params != nil && params.VerificationDocumentSid != nil {
		data.Set("VerificationDocumentSid", *params.VerificationDocumentSid)
	}
	if params != nil && params.VerificationType != nil {
		data.Set("VerificationType", *params.VerificationType)
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &NumbersV1HostedNumberOrder{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
