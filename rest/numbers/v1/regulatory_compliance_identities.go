/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"

	"github.com/twilio/twilio-go/client"
)

// Optional parameters for the method 'CreateIdentity'
type CreateIdentityParams struct {
	// A descriptive string that you create to describe the resource. It can be up to 128 characters long.
	FriendlyName *string `json:"FriendlyName,omitempty"`
	// The email address.
	Email *string `json:"Email,omitempty"`
	// The type of Identity resource to create.
	Type *string `json:"Type,omitempty"`
	// The ISO country code of the country.
	PurchaseIntentIsoCountry *string `json:"PurchaseIntentIsoCountry,omitempty"`
	// The type of phone number.
	PurchaseIntentNumberType *string `json:"PurchaseIntentNumberType,omitempty"`
	// The URL we should call using the `status_callback_method` to inform your application of status changes.
	StatusCallbackUrl *string `json:"StatusCallbackUrl,omitempty"`
	// The HTTP method we should use when calling `status_callback_url`.
	StatusCallbackMethod *string `json:"StatusCallbackMethod,omitempty"`
}

func (params *CreateIdentityParams) SetFriendlyName(FriendlyName string) *CreateIdentityParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateIdentityParams) SetEmail(Email string) *CreateIdentityParams {
	params.Email = &Email
	return params
}
func (params *CreateIdentityParams) SetType(Type string) *CreateIdentityParams {
	params.Type = &Type
	return params
}
func (params *CreateIdentityParams) SetPurchaseIntentIsoCountry(PurchaseIntentIsoCountry string) *CreateIdentityParams {
	params.PurchaseIntentIsoCountry = &PurchaseIntentIsoCountry
	return params
}
func (params *CreateIdentityParams) SetPurchaseIntentNumberType(PurchaseIntentNumberType string) *CreateIdentityParams {
	params.PurchaseIntentNumberType = &PurchaseIntentNumberType
	return params
}
func (params *CreateIdentityParams) SetStatusCallbackUrl(StatusCallbackUrl string) *CreateIdentityParams {
	params.StatusCallbackUrl = &StatusCallbackUrl
	return params
}
func (params *CreateIdentityParams) SetStatusCallbackMethod(StatusCallbackMethod string) *CreateIdentityParams {
	params.StatusCallbackMethod = &StatusCallbackMethod
	return params
}

//
func (c *ApiService) CreateIdentity(params *CreateIdentityParams) (*NumbersV1Identity, error) {
	path := "/v1/RegulatoryCompliance/Identities"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Email != nil {
		data.Set("Email", *params.Email)
	}
	if params != nil && params.Type != nil {
		data.Set("Type", *params.Type)
	}
	if params != nil && params.PurchaseIntentIsoCountry != nil {
		data.Set("PurchaseIntentIsoCountry", *params.PurchaseIntentIsoCountry)
	}
	if params != nil && params.PurchaseIntentNumberType != nil {
		data.Set("PurchaseIntentNumberType", *params.PurchaseIntentNumberType)
	}
	if params != nil && params.StatusCallbackUrl != nil {
		data.Set("StatusCallbackUrl", *params.StatusCallbackUrl)
	}
	if params != nil && params.StatusCallbackMethod != nil {
		data.Set("StatusCallbackMethod", *params.StatusCallbackMethod)
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &NumbersV1Identity{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

//
func (c *ApiService) FetchIdentity(Sid string) (*NumbersV1Identity, error) {
	path := "/v1/RegulatoryCompliance/Identities/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &NumbersV1Identity{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Optional parameters for the method 'ListIdentity'
type ListIdentityParams struct {
	// Show only the Identity resources that have this status.
	Status *string `json:"Status,omitempty"`
	// Show only the Identity resources with this ISO country code.
	PurchaseIntentIsoCountry *string `json:"PurchaseIntentIsoCountry,omitempty"`
	// Show only the Identity resources with this phone number type.
	PurchaseIntentNumberType *string `json:"PurchaseIntentNumberType,omitempty"`
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
	// Max number of records to return.
	Limit *int `json:"limit,omitempty"`
}

func (params *ListIdentityParams) SetStatus(Status string) *ListIdentityParams {
	params.Status = &Status
	return params
}
func (params *ListIdentityParams) SetPurchaseIntentIsoCountry(PurchaseIntentIsoCountry string) *ListIdentityParams {
	params.PurchaseIntentIsoCountry = &PurchaseIntentIsoCountry
	return params
}
func (params *ListIdentityParams) SetPurchaseIntentNumberType(PurchaseIntentNumberType string) *ListIdentityParams {
	params.PurchaseIntentNumberType = &PurchaseIntentNumberType
	return params
}
func (params *ListIdentityParams) SetPageSize(PageSize int) *ListIdentityParams {
	params.PageSize = &PageSize
	return params
}
func (params *ListIdentityParams) SetLimit(Limit int) *ListIdentityParams {
	params.Limit = &Limit
	return params
}

// Retrieve a single page of Identity records from the API. Request is executed immediately.
func (c *ApiService) PageIdentity(params *ListIdentityParams, pageToken, pageNumber string) (*ListIdentityResponse, error) {
	path := "/v1/RegulatoryCompliance/Identities"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}
	if params != nil && params.PurchaseIntentIsoCountry != nil {
		data.Set("PurchaseIntentIsoCountry", *params.PurchaseIntentIsoCountry)
	}
	if params != nil && params.PurchaseIntentNumberType != nil {
		data.Set("PurchaseIntentNumberType", *params.PurchaseIntentNumberType)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	if pageToken != "" {
		data.Set("PageToken", pageToken)
	}
	if pageNumber != "" {
		data.Set("Page", pageNumber)
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListIdentityResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Lists Identity records from the API as a list. Unlike stream, this operation is eager and loads 'limit' records into memory before returning.
func (c *ApiService) ListIdentity(params *ListIdentityParams) ([]NumbersV1Identity, error) {
	response, errors := c.StreamIdentity(params)

	records := make([]NumbersV1Identity, 0)
	for record := range response {
		records = append(records, record)
	}

	if err := <-errors; err != nil {
		return nil, err
	}

	return records, nil
}

// Streams Identity records from the API as a channel stream. This operation lazily loads records as efficiently as possible until the limit is reached.
func (c *ApiService) StreamIdentity(params *ListIdentityParams) (chan NumbersV1Identity, chan error) {
	if params == nil {
		params = &ListIdentityParams{}
	}
	params.SetPageSize(client.ReadLimits(params.PageSize, params.Limit))

	recordChannel := make(chan NumbersV1Identity, 1)
	errorChannel := make(chan error, 1)

	response, err := c.PageIdentity(params, "", "")
	if err != nil {
		errorChannel <- err
		close(recordChannel)
		close(errorChannel)
	} else {
		go c.streamIdentity(response, params, recordChannel, errorChannel)
	}

	return recordChannel, errorChannel
}

func (c *ApiService) streamIdentity(response *ListIdentityResponse, params *ListIdentityParams, recordChannel chan NumbersV1Identity, errorChannel chan error) {
	curRecord := 1

	for response != nil {
		responseRecords := response.Items
		for item := range responseRecords {
			recordChannel <- responseRecords[item]
			curRecord += 1
			if params.Limit != nil && *params.Limit < curRecord {
				close(recordChannel)
				close(errorChannel)
				return
			}
		}

		record, err := client.GetNext(c.baseURL, response, c.getNextListIdentityResponse)
		if err != nil {
			errorChannel <- err
			break
		} else if record == nil {
			break
		}

		response = record.(*ListIdentityResponse)
	}

	close(recordChannel)
	close(errorChannel)
}

func (c *ApiService) getNextListIdentityResponse(nextPageUrl string) (interface{}, error) {
	if nextPageUrl == "" {
		return nil, nil
	}
	resp, err := c.requestHandler.Get(nextPageUrl, nil, nil)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListIdentityResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}
	return ps, nil
}
