/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Routes
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"

	"github.com/twilio/twilio-go/client"
)

// Optional parameters for the method 'CreateRouteConfiguration'
type CreateRouteConfigurationParams struct {
	// The string that you assigned to describe the resource.
	FriendlyName *string `json:"FriendlyName,omitempty"`
	// TBD
	VoiceRegion *string `json:"VoiceRegion,omitempty"`
	// TBD
	MessagingRegion *string `json:"MessagingRegion,omitempty"`
	// TBD
	DataRegion *string `json:"DataRegion,omitempty"`
}

func (params *CreateRouteConfigurationParams) SetFriendlyName(FriendlyName string) *CreateRouteConfigurationParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateRouteConfigurationParams) SetVoiceRegion(VoiceRegion string) *CreateRouteConfigurationParams {
	params.VoiceRegion = &VoiceRegion
	return params
}
func (params *CreateRouteConfigurationParams) SetMessagingRegion(MessagingRegion string) *CreateRouteConfigurationParams {
	params.MessagingRegion = &MessagingRegion
	return params
}
func (params *CreateRouteConfigurationParams) SetDataRegion(DataRegion string) *CreateRouteConfigurationParams {
	params.DataRegion = &DataRegion
	return params
}

// Create a new Route Configuration.
func (c *ApiService) CreateRouteConfiguration(params *CreateRouteConfigurationParams) (*RoutesV1RouteConfiguration, error) {
	path := "/v1/RouteConfigurations"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.VoiceRegion != nil {
		data.Set("VoiceRegion", *params.VoiceRegion)
	}
	if params != nil && params.MessagingRegion != nil {
		data.Set("MessagingRegion", *params.MessagingRegion)
	}
	if params != nil && params.DataRegion != nil {
		data.Set("DataRegion", *params.DataRegion)
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &RoutesV1RouteConfiguration{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Delete a specific Route Configuration instance.
func (c *ApiService) DeleteRouteConfiguration(Sid string) error {
	path := "/v1/RouteConfigurations/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.requestHandler.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// Fetch a specific Route Configuration instance.
func (c *ApiService) FetchRouteConfiguration(Sid string) (*RoutesV1RouteConfiguration, error) {
	path := "/v1/RouteConfigurations/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &RoutesV1RouteConfiguration{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Optional parameters for the method 'ListRouteConfiguration'
type ListRouteConfigurationParams struct {
	// The unique string that identifies the phone number
	PhoneNumbers *string `json:"PhoneNumbers,omitempty"`
	// The unique string that identifies the domain name
	DomainNames *string `json:"DomainNames,omitempty"`
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
	// Max number of records to return.
	Limit *int `json:"limit,omitempty"`
}

func (params *ListRouteConfigurationParams) SetPhoneNumbers(PhoneNumbers string) *ListRouteConfigurationParams {
	params.PhoneNumbers = &PhoneNumbers
	return params
}
func (params *ListRouteConfigurationParams) SetDomainNames(DomainNames string) *ListRouteConfigurationParams {
	params.DomainNames = &DomainNames
	return params
}
func (params *ListRouteConfigurationParams) SetPageSize(PageSize int) *ListRouteConfigurationParams {
	params.PageSize = &PageSize
	return params
}
func (params *ListRouteConfigurationParams) SetLimit(Limit int) *ListRouteConfigurationParams {
	params.Limit = &Limit
	return params
}

// Retrieve a single page of RouteConfiguration records from the API. Request is executed immediately.
func (c *ApiService) PageRouteConfiguration(params *ListRouteConfigurationParams, pageToken, pageNumber string) (*ListRouteConfigurationResponse, error) {
	path := "/v1/RouteConfigurations"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PhoneNumbers != nil {
		data.Set("PhoneNumbers", *params.PhoneNumbers)
	}
	if params != nil && params.DomainNames != nil {
		data.Set("DomainNames", *params.DomainNames)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	if pageToken != "" {
		data.Set("PageToken", pageToken)
	}
	if pageNumber != "" {
		data.Set("Page", pageNumber)
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListRouteConfigurationResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Lists RouteConfiguration records from the API as a list. Unlike stream, this operation is eager and loads 'limit' records into memory before returning.
func (c *ApiService) ListRouteConfiguration(params *ListRouteConfigurationParams) ([]RoutesV1RouteConfiguration, error) {
	response, errors := c.StreamRouteConfiguration(params)

	records := make([]RoutesV1RouteConfiguration, 0)
	for record := range response {
		records = append(records, record)
	}

	if err := <-errors; err != nil {
		return nil, err
	}

	return records, nil
}

// Streams RouteConfiguration records from the API as a channel stream. This operation lazily loads records as efficiently as possible until the limit is reached.
func (c *ApiService) StreamRouteConfiguration(params *ListRouteConfigurationParams) (chan RoutesV1RouteConfiguration, chan error) {
	if params == nil {
		params = &ListRouteConfigurationParams{}
	}
	params.SetPageSize(client.ReadLimits(params.PageSize, params.Limit))

	recordChannel := make(chan RoutesV1RouteConfiguration, 1)
	errorChannel := make(chan error, 1)

	response, err := c.PageRouteConfiguration(params, "", "")
	if err != nil {
		errorChannel <- err
		close(recordChannel)
		close(errorChannel)
	} else {
		go c.streamRouteConfiguration(response, params, recordChannel, errorChannel)
	}

	return recordChannel, errorChannel
}

func (c *ApiService) streamRouteConfiguration(response *ListRouteConfigurationResponse, params *ListRouteConfigurationParams, recordChannel chan RoutesV1RouteConfiguration, errorChannel chan error) {
	curRecord := 1

	for response != nil {
		responseRecords := response.Results
		for item := range responseRecords {
			recordChannel <- responseRecords[item]
			curRecord += 1
			if params.Limit != nil && *params.Limit < curRecord {
				close(recordChannel)
				close(errorChannel)
				return
			}
		}

		record, err := client.GetNext(c.baseURL, response, c.getNextListRouteConfigurationResponse)
		if err != nil {
			errorChannel <- err
			break
		} else if record == nil {
			break
		}

		response = record.(*ListRouteConfigurationResponse)
	}

	close(recordChannel)
	close(errorChannel)
}

func (c *ApiService) getNextListRouteConfigurationResponse(nextPageUrl string) (interface{}, error) {
	if nextPageUrl == "" {
		return nil, nil
	}
	resp, err := c.requestHandler.Get(nextPageUrl, nil, nil)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListRouteConfigurationResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}
	return ps, nil
}

// Optional parameters for the method 'UpdateRouteConfiguration'
type UpdateRouteConfigurationParams struct {
	// The string that you assigned to describe the resource.
	FriendlyName *string `json:"FriendlyName,omitempty"`
	// TBD
	VoiceRegion *string `json:"VoiceRegion,omitempty"`
	// TBD
	MessagingRegion *string `json:"MessagingRegion,omitempty"`
	// TBD
	DataRegion *string `json:"DataRegion,omitempty"`
}

func (params *UpdateRouteConfigurationParams) SetFriendlyName(FriendlyName string) *UpdateRouteConfigurationParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *UpdateRouteConfigurationParams) SetVoiceRegion(VoiceRegion string) *UpdateRouteConfigurationParams {
	params.VoiceRegion = &VoiceRegion
	return params
}
func (params *UpdateRouteConfigurationParams) SetMessagingRegion(MessagingRegion string) *UpdateRouteConfigurationParams {
	params.MessagingRegion = &MessagingRegion
	return params
}
func (params *UpdateRouteConfigurationParams) SetDataRegion(DataRegion string) *UpdateRouteConfigurationParams {
	params.DataRegion = &DataRegion
	return params
}

// Update a specific Route Configuration instance.
func (c *ApiService) UpdateRouteConfiguration(Sid string, params *UpdateRouteConfigurationParams) (*RoutesV1RouteConfiguration, error) {
	path := "/v1/RouteConfigurations/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.VoiceRegion != nil {
		data.Set("VoiceRegion", *params.VoiceRegion)
	}
	if params != nil && params.MessagingRegion != nil {
		data.Set("MessagingRegion", *params.MessagingRegion)
	}
	if params != nil && params.DataRegion != nil {
		data.Set("DataRegion", *params.DataRegion)
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &RoutesV1RouteConfiguration{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
