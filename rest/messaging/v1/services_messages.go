/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"

	"github.com/twilio/twilio-go/client"
)

// Optional parameters for the method 'CreateMessage'
type CreateMessageParams struct {
	// The list of message recipients, formatted as `channel:number`.
	Recipient *[]string `json:"Recipient,omitempty"`
	// A single colon-delimited address.
	From *string `json:"From,omitempty"`
	// The message's time-to-live in seconds. Can be an integer between 1 and 14,400.
	Ttl *int `json:"Ttl,omitempty"`
	// Template for message body.
	Template *string `json:"Template,omitempty"`
	// Template sid to get template for message body.
	TemplateSid *string `json:"TemplateSid,omitempty"`
	// Template language which complements template sid to get template for message body.
	TemplateLanguage *string `json:"TemplateLanguage,omitempty"`
	// The dictionary of arguments to construct message body from template.
	TemplateArgs *interface{} `json:"TemplateArgs,omitempty"`
	// The message body.
	Body *string `json:"Body,omitempty"`
	// The list of media URLs.
	MediaUrl *[]string `json:"MediaUrl,omitempty"`
}

func (params *CreateMessageParams) SetRecipient(Recipient []string) *CreateMessageParams {
	params.Recipient = &Recipient
	return params
}
func (params *CreateMessageParams) SetFrom(From string) *CreateMessageParams {
	params.From = &From
	return params
}
func (params *CreateMessageParams) SetTtl(Ttl int) *CreateMessageParams {
	params.Ttl = &Ttl
	return params
}
func (params *CreateMessageParams) SetTemplate(Template string) *CreateMessageParams {
	params.Template = &Template
	return params
}
func (params *CreateMessageParams) SetTemplateSid(TemplateSid string) *CreateMessageParams {
	params.TemplateSid = &TemplateSid
	return params
}
func (params *CreateMessageParams) SetTemplateLanguage(TemplateLanguage string) *CreateMessageParams {
	params.TemplateLanguage = &TemplateLanguage
	return params
}
func (params *CreateMessageParams) SetTemplateArgs(TemplateArgs interface{}) *CreateMessageParams {
	params.TemplateArgs = &TemplateArgs
	return params
}
func (params *CreateMessageParams) SetBody(Body string) *CreateMessageParams {
	params.Body = &Body
	return params
}
func (params *CreateMessageParams) SetMediaUrl(MediaUrl []string) *CreateMessageParams {
	params.MediaUrl = &MediaUrl
	return params
}

//
func (c *ApiService) CreateMessage(MessagingServiceSid string, params *CreateMessageParams) (*MessagingV1Message, error) {
	path := "/v1/Services/{MessagingServiceSid}/Messages"
	path = strings.Replace(path, "{"+"MessagingServiceSid"+"}", MessagingServiceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Recipient != nil {
		for _, item := range *params.Recipient {
			data.Add("Recipient", item)
		}
	}
	if params != nil && params.From != nil {
		data.Set("From", *params.From)
	}
	if params != nil && params.Ttl != nil {
		data.Set("Ttl", fmt.Sprint(*params.Ttl))
	}
	if params != nil && params.Template != nil {
		data.Set("Template", *params.Template)
	}
	if params != nil && params.TemplateSid != nil {
		data.Set("TemplateSid", *params.TemplateSid)
	}
	if params != nil && params.TemplateLanguage != nil {
		data.Set("TemplateLanguage", *params.TemplateLanguage)
	}
	if params != nil && params.TemplateArgs != nil {
		v, err := json.Marshal(params.TemplateArgs)

		if err != nil {
			return nil, err
		}

		data.Set("TemplateArgs", string(v))
	}
	if params != nil && params.Body != nil {
		data.Set("Body", *params.Body)
	}
	if params != nil && params.MediaUrl != nil {
		for _, item := range *params.MediaUrl {
			data.Add("MediaUrl", item)
		}
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &MessagingV1Message{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

//
func (c *ApiService) DeleteMessage(MessagingServiceSid string, Sid string) error {
	path := "/v1/Services/{MessagingServiceSid}/Messages/{Sid}"
	path = strings.Replace(path, "{"+"MessagingServiceSid"+"}", MessagingServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.requestHandler.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

//
func (c *ApiService) FetchMessage(MessagingServiceSid string, Sid string) (*MessagingV1Message, error) {
	path := "/v1/Services/{MessagingServiceSid}/Messages/{Sid}"
	path = strings.Replace(path, "{"+"MessagingServiceSid"+"}", MessagingServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &MessagingV1Message{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Optional parameters for the method 'ListMessage'
type ListMessageParams struct {
	// The date when the resources to read were created.
	DateSent *string `json:"DateSent,omitempty"`
	// The date when the resources to read were created.
	DateSentBefore *string `json:"DateSent&lt;,omitempty"`
	// The date when the resources to read were created.
	DateSentAfter *string `json:"DateSent&gt;,omitempty"`
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
	// Max number of records to return.
	Limit *int `json:"limit,omitempty"`
}

func (params *ListMessageParams) SetDateSent(DateSent string) *ListMessageParams {
	params.DateSent = &DateSent
	return params
}
func (params *ListMessageParams) SetDateSentBefore(DateSentBefore string) *ListMessageParams {
	params.DateSentBefore = &DateSentBefore
	return params
}
func (params *ListMessageParams) SetDateSentAfter(DateSentAfter string) *ListMessageParams {
	params.DateSentAfter = &DateSentAfter
	return params
}
func (params *ListMessageParams) SetPageSize(PageSize int) *ListMessageParams {
	params.PageSize = &PageSize
	return params
}
func (params *ListMessageParams) SetLimit(Limit int) *ListMessageParams {
	params.Limit = &Limit
	return params
}

// Retrieve a single page of Message records from the API. Request is executed immediately.
func (c *ApiService) PageMessage(MessagingServiceSid string, params *ListMessageParams, pageToken, pageNumber string) (*ListMessageResponse, error) {
	path := "/v1/Services/{MessagingServiceSid}/Messages"

	path = strings.Replace(path, "{"+"MessagingServiceSid"+"}", MessagingServiceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.DateSent != nil {
		data.Set("DateSent", fmt.Sprint(*params.DateSent))
	}
	if params != nil && params.DateSentBefore != nil {
		data.Set("DateSent<", fmt.Sprint(*params.DateSentBefore))
	}
	if params != nil && params.DateSentAfter != nil {
		data.Set("DateSent>", fmt.Sprint(*params.DateSentAfter))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	if pageToken != "" {
		data.Set("PageToken", pageToken)
	}
	if pageNumber != "" {
		data.Set("Page", pageNumber)
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListMessageResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Lists Message records from the API as a list. Unlike stream, this operation is eager and loads 'limit' records into memory before returning.
func (c *ApiService) ListMessage(MessagingServiceSid string, params *ListMessageParams) ([]MessagingV1Message, error) {
	response, errors := c.StreamMessage(MessagingServiceSid, params)

	records := make([]MessagingV1Message, 0)
	for record := range response {
		records = append(records, record)
	}

	if err := <-errors; err != nil {
		return nil, err
	}

	return records, nil
}

// Streams Message records from the API as a channel stream. This operation lazily loads records as efficiently as possible until the limit is reached.
func (c *ApiService) StreamMessage(MessagingServiceSid string, params *ListMessageParams) (chan MessagingV1Message, chan error) {
	if params == nil {
		params = &ListMessageParams{}
	}
	params.SetPageSize(client.ReadLimits(params.PageSize, params.Limit))

	recordChannel := make(chan MessagingV1Message, 1)
	errorChannel := make(chan error, 1)

	response, err := c.PageMessage(MessagingServiceSid, params, "", "")
	if err != nil {
		errorChannel <- err
		close(recordChannel)
		close(errorChannel)
	} else {
		go c.streamMessage(response, params, recordChannel, errorChannel)
	}

	return recordChannel, errorChannel
}

func (c *ApiService) streamMessage(response *ListMessageResponse, params *ListMessageParams, recordChannel chan MessagingV1Message, errorChannel chan error) {
	curRecord := 1

	for response != nil {
		responseRecords := response.Messages
		for item := range responseRecords {
			recordChannel <- responseRecords[item]
			curRecord += 1
			if params.Limit != nil && *params.Limit < curRecord {
				close(recordChannel)
				close(errorChannel)
				return
			}
		}

		record, err := client.GetNext(c.baseURL, response, c.getNextListMessageResponse)
		if err != nil {
			errorChannel <- err
			break
		} else if record == nil {
			break
		}

		response = record.(*ListMessageResponse)
	}

	close(recordChannel)
	close(errorChannel)
}

func (c *ApiService) getNextListMessageResponse(nextPageUrl string) (interface{}, error) {
	if nextPageUrl == "" {
		return nil, nil
	}
	resp, err := c.requestHandler.Get(nextPageUrl, nil, nil)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListMessageResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}
	return ps, nil
}

// Optional parameters for the method 'UpdateMessage'
type UpdateMessageParams struct {
	// The message body.
	Body *string `json:"Body,omitempty"`
}

func (params *UpdateMessageParams) SetBody(Body string) *UpdateMessageParams {
	params.Body = &Body
	return params
}

//
func (c *ApiService) UpdateMessage(MessagingServiceSid string, Sid string, params *UpdateMessageParams) (*MessagingV1Message, error) {
	path := "/v1/Services/{MessagingServiceSid}/Messages/{Sid}"
	path = strings.Replace(path, "{"+"MessagingServiceSid"+"}", MessagingServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Body != nil {
		data.Set("Body", *params.Body)
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &MessagingV1Message{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
