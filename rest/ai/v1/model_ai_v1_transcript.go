/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Ai
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"time"

	"github.com/twilio/twilio-go/client"
)

// AiV1Transcript struct for AiV1Transcript
type AiV1Transcript struct {
	// The unique SID identifier of the Account.
	AccountSid *string `json:"account_sid,omitempty"`
	// The unique SID identifier of the Call.
	CallSid *string `json:"call_sid,omitempty"`
	// The overall confidence score for the transcript.
	Confidence *float32 `json:"confidence,omitempty"`
	// Data logging allows Twilio to improve the quality of the speech recognition through using customer data to refine its speech recognition models.
	DataLogging *bool `json:"data_logging,omitempty"`
	// The date that this Transcript was created, given in ISO 8601 format.
	DateCreated *time.Time `json:"date_created,omitempty"`
	// The date that this Transcript was updated, given in ISO 8601 format.
	DateUpdated *time.Time `json:"date_updated,omitempty"`
	// The environment where the audio is coming from. Values can be 'telephony', 'meeting_room', or 'broadcast'.
	Environment *string `json:"environment,omitempty"`
	// The default language locale of the audio.
	LanguageLocale *string `json:"language_locale,omitempty"`
	// Contains a dictionary of URL links to nested resources of this Transcript.
	Links *map[string]interface{} `json:"links,omitempty"`
	// The unique SID identifier of the Model.
	ModelSid *string `json:"model_sid,omitempty"`
	// The charge for the transcript in the currency associated with the account. This value is populated after the transcript is complete so it may not be available immediately.
	Price *float32 `json:"price,omitempty"`
	// The currency in which price is measured, in ISO 4127 format (e.g. usd, eur, jpy).
	PriceUnit *string `json:"price_unit,omitempty"`
	// The unique SID identifier of the Recording.
	RecordingSid *string `json:"recording_sid,omitempty"`
	// The unique SID identifier of the Service.
	ServiceSid *string `json:"service_sid,omitempty"`
	// A 34 character string that uniquely identifies this Transcript.
	Sid *string `json:"sid,omitempty"`
	// The date that this Transcript was started, given in ISO 8601 format.
	StartTime        *time.Time `json:"start_time,omitempty"`
	Status           *string    `json:"status,omitempty"`
	TranscriptStatus *string    `json:"transcript_status,omitempty"`
	// The URL of this resource.
	Url *string `json:"url,omitempty"`
	// List of language understanding outputs.
	LupOutputs *interface{} `json:"lup_outputs,omitempty"`
	// List of language understanding models applied.
	LupAppliedModels *interface{} `json:"lup_applied_models,omitempty"`
	// The direction of this Transcript's call. One of `inbound`, `outbound`, `internal` or `unknown`.
	CallDirection *string `json:"call_direction,omitempty"`
	// The From of this Transcript's call. A string represents the phone number.
	CallFrom *string `json:"call_from,omitempty"`
	// The To of this Transcript's call. A string represents the phone number.
	CallTo *string `json:"call_to,omitempty"`
	// The duration of this Transcript's call.
	CallDuration *float32 `json:"call_duration,omitempty"`
	// The date this transcript call was started, given in ISO 8601 format.
	CallStartTime *time.Time   `json:"call_start_time,omitempty"`
	Participants  *interface{} `json:"participants,omitempty"`
	// If the transcript has been redacted, a sensitive alternative of the transcript will be available.
	HasSensitiveView *bool `json:"has_sensitive_view,omitempty"`
}

func (response *AiV1Transcript) UnmarshalJSON(bytes []byte) (err error) {
	raw := struct {
		AccountSid       *string                 `json:"account_sid"`
		CallSid          *string                 `json:"call_sid"`
		Confidence       *interface{}            `json:"confidence"`
		DataLogging      *bool                   `json:"data_logging"`
		DateCreated      *time.Time              `json:"date_created"`
		DateUpdated      *time.Time              `json:"date_updated"`
		Environment      *string                 `json:"environment"`
		LanguageLocale   *string                 `json:"language_locale"`
		Links            *map[string]interface{} `json:"links"`
		ModelSid         *string                 `json:"model_sid"`
		Price            *interface{}            `json:"price"`
		PriceUnit        *string                 `json:"price_unit"`
		RecordingSid     *string                 `json:"recording_sid"`
		ServiceSid       *string                 `json:"service_sid"`
		Sid              *string                 `json:"sid"`
		StartTime        *time.Time              `json:"start_time"`
		Status           *string                 `json:"status"`
		TranscriptStatus *string                 `json:"transcript_status"`
		Url              *string                 `json:"url"`
		LupOutputs       *interface{}            `json:"lup_outputs"`
		LupAppliedModels *interface{}            `json:"lup_applied_models"`
		CallDirection    *string                 `json:"call_direction"`
		CallFrom         *string                 `json:"call_from"`
		CallTo           *string                 `json:"call_to"`
		CallDuration     *interface{}            `json:"call_duration"`
		CallStartTime    *time.Time              `json:"call_start_time"`
		Participants     *interface{}            `json:"participants"`
		HasSensitiveView *bool                   `json:"has_sensitive_view"`
	}{}

	if err = json.Unmarshal(bytes, &raw); err != nil {
		return err
	}

	*response = AiV1Transcript{
		AccountSid:       raw.AccountSid,
		CallSid:          raw.CallSid,
		DataLogging:      raw.DataLogging,
		DateCreated:      raw.DateCreated,
		DateUpdated:      raw.DateUpdated,
		Environment:      raw.Environment,
		LanguageLocale:   raw.LanguageLocale,
		Links:            raw.Links,
		ModelSid:         raw.ModelSid,
		PriceUnit:        raw.PriceUnit,
		RecordingSid:     raw.RecordingSid,
		ServiceSid:       raw.ServiceSid,
		Sid:              raw.Sid,
		StartTime:        raw.StartTime,
		Status:           raw.Status,
		TranscriptStatus: raw.TranscriptStatus,
		Url:              raw.Url,
		LupOutputs:       raw.LupOutputs,
		LupAppliedModels: raw.LupAppliedModels,
		CallDirection:    raw.CallDirection,
		CallFrom:         raw.CallFrom,
		CallTo:           raw.CallTo,
		CallStartTime:    raw.CallStartTime,
		Participants:     raw.Participants,
		HasSensitiveView: raw.HasSensitiveView,
	}

	responseConfidence, err := client.UnmarshalFloat32(raw.Confidence)
	if err != nil {
		return err
	}
	response.Confidence = responseConfidence

	responsePrice, err := client.UnmarshalFloat32(raw.Price)
	if err != nil {
		return err
	}
	response.Price = responsePrice

	responseCallDuration, err := client.UnmarshalFloat32(raw.CallDuration)
	if err != nil {
		return err
	}
	response.CallDuration = responseCallDuration

	return
}
