/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Ai
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"

	"github.com/twilio/twilio-go/client"
)

// Optional parameters for the method 'CreateTranscript'
type CreateTranscriptParams struct {
	// Data logging allows Twilio to improve the quality of the speech recognition through using customer data to refine its speech recognition models.
	DataLogging *bool `json:"DataLogging,omitempty"`
	// The unique SID identifier of the Model to use.
	ModelSid *string `json:"ModelSid,omitempty"`
	// The URL of the media to transcribe.
	MediaUrl *string `json:"MediaUrl,omitempty"`
	// The unique SID identifier of the Recording to use.
	RecordingSid *string `json:"RecordingSid,omitempty"`
	// The array containing the transcript's participants. Participant fields: id, channel, type,role, full_name, email and image_url
	Participants *interface{} `json:"Participants,omitempty"`
	//
	CallDirection *string `json:"CallDirection,omitempty"`
}

func (params *CreateTranscriptParams) SetDataLogging(DataLogging bool) *CreateTranscriptParams {
	params.DataLogging = &DataLogging
	return params
}
func (params *CreateTranscriptParams) SetModelSid(ModelSid string) *CreateTranscriptParams {
	params.ModelSid = &ModelSid
	return params
}
func (params *CreateTranscriptParams) SetMediaUrl(MediaUrl string) *CreateTranscriptParams {
	params.MediaUrl = &MediaUrl
	return params
}
func (params *CreateTranscriptParams) SetRecordingSid(RecordingSid string) *CreateTranscriptParams {
	params.RecordingSid = &RecordingSid
	return params
}
func (params *CreateTranscriptParams) SetParticipants(Participants interface{}) *CreateTranscriptParams {
	params.Participants = &Participants
	return params
}
func (params *CreateTranscriptParams) SetCallDirection(CallDirection string) *CreateTranscriptParams {
	params.CallDirection = &CallDirection
	return params
}

// Create a new Transcript for the service
func (c *ApiService) CreateTranscript(ServiceSid string, params *CreateTranscriptParams) (*AiV1Transcript, error) {
	path := "/v1/Services/{ServiceSid}/Transcripts"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.DataLogging != nil {
		data.Set("DataLogging", fmt.Sprint(*params.DataLogging))
	}
	if params != nil && params.ModelSid != nil {
		data.Set("ModelSid", *params.ModelSid)
	}
	if params != nil && params.MediaUrl != nil {
		data.Set("MediaUrl", *params.MediaUrl)
	}
	if params != nil && params.RecordingSid != nil {
		data.Set("RecordingSid", *params.RecordingSid)
	}
	if params != nil && params.Participants != nil {
		v, err := json.Marshal(params.Participants)

		if err != nil {
			return nil, err
		}

		data.Set("Participants", string(v))
	}
	if params != nil && params.CallDirection != nil {
		data.Set("CallDirection", *params.CallDirection)
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &AiV1Transcript{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Delete a specific Transcript.
func (c *ApiService) DeleteTranscript(ServiceSid string, Sid string) error {
	path := "/v1/Services/{ServiceSid}/Transcripts/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.requestHandler.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// Fetch a specific Transcript.
func (c *ApiService) FetchTranscript(ServiceSid string, Sid string) (*AiV1Transcript, error) {
	path := "/v1/Services/{ServiceSid}/Transcripts/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &AiV1Transcript{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Optional parameters for the method 'ListTranscript'
type ListTranscriptParams struct {
	// Filter by before StartTime.
	BeforeStartTime *string `json:"BeforeStartTime,omitempty"`
	// Filter by after StartTime.
	AfterStartTime *string `json:"AfterStartTime,omitempty"`
	// Filter by before DateCreated.
	BeforeDateCreated *string `json:"BeforeDateCreated,omitempty"`
	// Filter by after DateCreated.
	AfterDateCreated *string `json:"AfterDateCreated,omitempty"`
	// Filter by status.
	Status *string `json:"Status,omitempty"`
	// Filter by LanguageLocale.
	LanguageLocale *string `json:"LanguageLocale,omitempty"`
	// Filter by CallSid.
	CallSid *string `json:"CallSid,omitempty"`
	// Filter by RecordingSid.
	RecordingSid *string `json:"RecordingSid,omitempty"`
	// Filter by confidence (less than or equal to).
	ConfidenceLessThan *float32 `json:"ConfidenceLessThan,omitempty"`
	// Filter by confidence (greater than or equal to).
	ConfidenceGreaterThan *float32 `json:"ConfidenceGreaterThan,omitempty"`
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
	// Max number of records to return.
	Limit *int `json:"limit,omitempty"`
}

func (params *ListTranscriptParams) SetBeforeStartTime(BeforeStartTime string) *ListTranscriptParams {
	params.BeforeStartTime = &BeforeStartTime
	return params
}
func (params *ListTranscriptParams) SetAfterStartTime(AfterStartTime string) *ListTranscriptParams {
	params.AfterStartTime = &AfterStartTime
	return params
}
func (params *ListTranscriptParams) SetBeforeDateCreated(BeforeDateCreated string) *ListTranscriptParams {
	params.BeforeDateCreated = &BeforeDateCreated
	return params
}
func (params *ListTranscriptParams) SetAfterDateCreated(AfterDateCreated string) *ListTranscriptParams {
	params.AfterDateCreated = &AfterDateCreated
	return params
}
func (params *ListTranscriptParams) SetStatus(Status string) *ListTranscriptParams {
	params.Status = &Status
	return params
}
func (params *ListTranscriptParams) SetLanguageLocale(LanguageLocale string) *ListTranscriptParams {
	params.LanguageLocale = &LanguageLocale
	return params
}
func (params *ListTranscriptParams) SetCallSid(CallSid string) *ListTranscriptParams {
	params.CallSid = &CallSid
	return params
}
func (params *ListTranscriptParams) SetRecordingSid(RecordingSid string) *ListTranscriptParams {
	params.RecordingSid = &RecordingSid
	return params
}
func (params *ListTranscriptParams) SetConfidenceLessThan(ConfidenceLessThan float32) *ListTranscriptParams {
	params.ConfidenceLessThan = &ConfidenceLessThan
	return params
}
func (params *ListTranscriptParams) SetConfidenceGreaterThan(ConfidenceGreaterThan float32) *ListTranscriptParams {
	params.ConfidenceGreaterThan = &ConfidenceGreaterThan
	return params
}
func (params *ListTranscriptParams) SetPageSize(PageSize int) *ListTranscriptParams {
	params.PageSize = &PageSize
	return params
}
func (params *ListTranscriptParams) SetLimit(Limit int) *ListTranscriptParams {
	params.Limit = &Limit
	return params
}

// Retrieve a single page of Transcript records from the API. Request is executed immediately.
func (c *ApiService) PageTranscript(ServiceSid string, params *ListTranscriptParams, pageToken, pageNumber string) (*ListTranscriptResponse, error) {
	path := "/v1/Services/{ServiceSid}/Transcripts"

	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.BeforeStartTime != nil {
		data.Set("BeforeStartTime", *params.BeforeStartTime)
	}
	if params != nil && params.AfterStartTime != nil {
		data.Set("AfterStartTime", *params.AfterStartTime)
	}
	if params != nil && params.BeforeDateCreated != nil {
		data.Set("BeforeDateCreated", *params.BeforeDateCreated)
	}
	if params != nil && params.AfterDateCreated != nil {
		data.Set("AfterDateCreated", *params.AfterDateCreated)
	}
	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}
	if params != nil && params.LanguageLocale != nil {
		data.Set("LanguageLocale", *params.LanguageLocale)
	}
	if params != nil && params.CallSid != nil {
		data.Set("CallSid", *params.CallSid)
	}
	if params != nil && params.RecordingSid != nil {
		data.Set("RecordingSid", *params.RecordingSid)
	}
	if params != nil && params.ConfidenceLessThan != nil {
		data.Set("ConfidenceLessThan", fmt.Sprint(*params.ConfidenceLessThan))
	}
	if params != nil && params.ConfidenceGreaterThan != nil {
		data.Set("ConfidenceGreaterThan", fmt.Sprint(*params.ConfidenceGreaterThan))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	if pageToken != "" {
		data.Set("PageToken", pageToken)
	}
	if pageNumber != "" {
		data.Set("Page", pageNumber)
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListTranscriptResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Lists Transcript records from the API as a list. Unlike stream, this operation is eager and loads 'limit' records into memory before returning.
func (c *ApiService) ListTranscript(ServiceSid string, params *ListTranscriptParams) ([]AiV1Transcript, error) {
	response, errors := c.StreamTranscript(ServiceSid, params)

	records := make([]AiV1Transcript, 0)
	for record := range response {
		records = append(records, record)
	}

	if err := <-errors; err != nil {
		return nil, err
	}

	return records, nil
}

// Streams Transcript records from the API as a channel stream. This operation lazily loads records as efficiently as possible until the limit is reached.
func (c *ApiService) StreamTranscript(ServiceSid string, params *ListTranscriptParams) (chan AiV1Transcript, chan error) {
	if params == nil {
		params = &ListTranscriptParams{}
	}
	params.SetPageSize(client.ReadLimits(params.PageSize, params.Limit))

	recordChannel := make(chan AiV1Transcript, 1)
	errorChannel := make(chan error, 1)

	response, err := c.PageTranscript(ServiceSid, params, "", "")
	if err != nil {
		errorChannel <- err
		close(recordChannel)
		close(errorChannel)
	} else {
		go c.streamTranscript(response, params, recordChannel, errorChannel)
	}

	return recordChannel, errorChannel
}

func (c *ApiService) streamTranscript(response *ListTranscriptResponse, params *ListTranscriptParams, recordChannel chan AiV1Transcript, errorChannel chan error) {
	curRecord := 1

	for response != nil {
		responseRecords := response.Transcripts
		for item := range responseRecords {
			recordChannel <- responseRecords[item]
			curRecord += 1
			if params.Limit != nil && *params.Limit < curRecord {
				close(recordChannel)
				close(errorChannel)
				return
			}
		}

		record, err := client.GetNext(c.baseURL, response, c.getNextListTranscriptResponse)
		if err != nil {
			errorChannel <- err
			break
		} else if record == nil {
			break
		}

		response = record.(*ListTranscriptResponse)
	}

	close(recordChannel)
	close(errorChannel)
}

func (c *ApiService) getNextListTranscriptResponse(nextPageUrl string) (interface{}, error) {
	if nextPageUrl == "" {
		return nil, nil
	}
	resp, err := c.requestHandler.Get(nextPageUrl, nil, nil)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListTranscriptResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}
	return ps, nil
}
